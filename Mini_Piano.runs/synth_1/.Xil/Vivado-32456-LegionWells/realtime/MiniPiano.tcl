# 
# Synthesis run script generated by Vivado
# 

namespace eval rt {
    variable rc
}
set rt::rc [catch {
  uplevel #0 {
    set ::env(BUILTIN_SYNTH) true
    source $::env(HRT_TCL_PATH)/rtSynthPrep.tcl
    rt::HARTNDb_resetJobStats
    rt::HARTNDb_resetSystemStats
    rt::HARTNDb_startSystemStats
    rt::HARTNDb_startJobStats
    set rt::cmdEcho 0
    rt::set_parameter writeXmsg true
    rt::set_parameter enableParallelHelperSpawn true
    set ::env(RT_TMP) "C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.runs/synth_1/.Xil/Vivado-32456-LegionWells/realtime/tmp"
    if { [ info exists ::env(RT_TMP) ] } {
      file delete -force $::env(RT_TMP)
      file mkdir $::env(RT_TMP)
    }

    rt::delete_design

    set rt::partid xc7a35tcsg324-1
    source $::env(HRT_TCL_PATH)/rtSynthParallelPrep.tcl

    set rt::multiChipSynthesisFlow false
    source $::env(SYNTH_COMMON)/common_vhdl.tcl
    set rt::defaultWorkLibName xil_defaultlib

    set rt::useElabCache false
    if {$rt::useElabCache == false} {
      rt::read_verilog -sv -include {
    {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new}
    {c:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/ip/gen_clk25}
    {c:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/ip/rom_pic1}
  } {
      D:/Xilinx_Vivado_SDK_2017.4_1216_1/Vivado/2017.4/data/ip/xpm/xpm_cdc/hdl/xpm_cdc.sv
      D:/Xilinx_Vivado_SDK_2017.4_1216_1/Vivado/2017.4/data/ip/xpm/xpm_memory/hdl/xpm_memory.sv
    }
      rt::read_verilog -include {
    {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new}
    {c:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/ip/gen_clk25}
    {c:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/ip/rom_pic1}
  } {
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.runs/synth_1/.Xil/Vivado-32456-LegionWells/realtime/blk_mem_gen_0_stub.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.runs/synth_1/.Xil/Vivado-32456-LegionWells/realtime/blk_mem_gen_1_stub.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.runs/synth_1/.Xil/Vivado-32456-LegionWells/realtime/gen_clk25_stub.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.runs/synth_1/.Xil/Vivado-32456-LegionWells/realtime/rom_pic1_stub.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Key_Adjustment.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Keyboard.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Buzzer.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Frequency_Divider.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Learning_Mode.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Led.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Led_Display_Mode.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Level_Calculate.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Library.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Light_seg_Display.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Record.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Speed_Control.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/Wave_Generator.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/button.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/clk_div.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/game_rgb_out.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/pic_data_littlestar.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/vga_character.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/vga_driver.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/vga_music_game.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/vga_pic_littlestar.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/vga_top.v}
      {C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.srcs/sources_1/new/MiniPiano.v}
    }
      rt::read_vhdl -lib xpm D:/Xilinx_Vivado_SDK_2017.4_1216_1/Vivado/2017.4/data/ip/xpm/xpm_VCOMP.vhd
      rt::filesetChecksum
    }
    rt::set_parameter usePostFindUniquification false
    set rt::top MiniPiano
    set rt::reportTiming false
    rt::set_parameter elaborateOnly true
    rt::set_parameter elaborateRtl true
    rt::set_parameter eliminateRedundantBitOperator false
    rt::set_parameter writeBlackboxInterface true
    rt::set_parameter merge_flipflops true
    rt::set_parameter srlDepthThreshold 3
    rt::set_parameter rstSrlDepthThreshold 4
# MODE: 
    rt::set_parameter webTalkPath {}
    rt::set_parameter enableSplitFlowPath "C:/Users/Wells/Desktop/Major CS/Digital Logic/Mini/Mini_Piano.runs/synth_1/.Xil/Vivado-32456-LegionWells/"
    set ok_to_delete_rt_tmp true 
    if { [rt::get_parameter parallelDebug] } { 
       set ok_to_delete_rt_tmp false 
    } 
    if {$rt::useElabCache == false} {
        set oldMIITMVal [rt::get_parameter maxInputIncreaseToMerge]; rt::set_parameter maxInputIncreaseToMerge 1000
        set oldCDPCRL [rt::get_parameter createDfgPartConstrRecurLimit]; rt::set_parameter createDfgPartConstrRecurLimit 1
      rt::run_rtlelab -module $rt::top
        rt::set_parameter maxInputIncreaseToMerge $oldMIITMVal
        rt::set_parameter createDfgPartConstrRecurLimit $oldCDPCRL
    }

    set rt::flowresult [ source $::env(SYNTH_COMMON)/flow.tcl ]
    rt::HARTNDb_stopJobStats
    if { $rt::flowresult == 1 } { return -code error }


    if { [ info exists ::env(RT_TMP) ] } {
      if { [info exists ok_to_delete_rt_tmp] && $ok_to_delete_rt_tmp } { 
        file delete -force $::env(RT_TMP)
      }
    }

    source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  } ; #end uplevel
} rt::result]

if { $rt::rc } {
  $rt::db resetHdlParse
  set hsKey [rt::get_parameter helper_shm_key] 
  if { $hsKey != "" && [info exists ::env(BUILTIN_SYNTH)] && [rt::get_parameter enableParallelHelperSpawn] && [info exists rt::doParallel] && $rt::doParallel} { 
     $rt::db killSynthHelper $hsKey
  } 
  source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  return -code "error" $rt::result
}
